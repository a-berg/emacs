#+title: My Emacs Configuration File
#+PROPERTY: header-args:emacs-lisp :tangle ./config.el :mkdirp yes

Welcome to my Emacs configuration! This is a fairly simple/minimal config currently
based off (and depending upon) Crafted Emacs config. However, it is my desire to
eventually make it independent.

Some highlights:

 * [[https://github.com/meow-edit/meow][meow]] for modal editing.
 * Use =general.el= to define keybindings.
 * Package management via =use-package= and =quelpa=.
 * Theme is a slight modification of the excellent (and built in!) Modus Operandi.
 * Terminal emulation via [[https://codeberg.org/akib/emacs-eat][EAT]] (*E* mulate *A* *T* erminal).

* Setting up
   
Do some babel tangle config.

#+begin_src emacs-lisp
  ;;; config.el -- Example Crafted Emacs user customization file -*- lexical-binding: t; -*-
  ;; This file is generated from config.org. If you want to edit the
  ;; configuration, DO NOT edit config.el, edit config.org, instead.

  ;; Tangle the code blocks to config.el on save.
  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "config.org" crafted-config-path))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'after-save-hook #'org-babel-tangle-config)))
#+end_src

Bootstrap =use-package= and =quelpa= (to install packages from git).

#+begin_src emacs-lisp
  (crafted-package-install-package 'use-package)
  ;;; then bootstrap use-package
  (eval-when-compile
    (add-to-list 'load-path "./elpa/use-package-2.4.4")
    (require 'use-package))
  ;;; small extension to use-package-ensure-system-package
  (use-package use-package-ensure-system-package
    :ensure t)
  ;;; now install quelpa and use it to also install quelpa-use-package,
  ;;; and we are all set!
  (crafted-package-install-package 'quelpa)
  (quelpa
   '(quelpa-use-package
     :fetcher git
     :url "https://github.com/quelpa/quelpa-use-package.git"))
  (require 'quelpa-use-package)
#+end_src


* Crafted Modules

At the moment, Crafted Emacs offers the following modules. Comment out everything you
don't want to use.

*NOTE*: these crafted modules would need to be replaced (except meow, since I wrote it) by
custom config and modules in order to "break free" from Crafted Emacs.  For now, it's ok.

#+begin_src emacs-lisp
  (require 'crafted-defaults)    ; Sensible default settings for Emacs
  (require 'crafted-updates)     ; Tools to upgrade Crafted Emacs
  (require 'crafted-completion)  ; selection framework based on `vertico`
  (require 'crafted-ui)          ; Better UI experience (modeline etc.)
  (require 'crafted-windows)     ; Window management configuration
  (require 'crafted-python)      ; python, needs customization
  (require 'crafted-editing)     ; Whitspace trimming, auto parens etc.
  (require 'crafted-meow)
  (require 'crafted-org)         ; org-appear, clickable hyperlinks etc.
  (require 'crafted-project)     ; built-in alternative to projectile
  (require 'crafted-speedbar)    ; built-in file-tree
  (require 'crafted-workspaces)  ; tabs and workspaces
  ;; (require 'crafted-screencast)  ; show current command and binding in modeline
  (require 'crafted-compile)     ; automatically compile some emacs lisp files
#+end_src

* Font and theme settings
** Font settings

Set the default face. The default face is the basis for most other faces used in
Emacs. A "face" is a configuration including font, font size, foreground and background
colors and other attributes.  The fixed-pitch and fixed-pitch-serif faces are monospace
faces generally used as the default face for code. The variable-pitch face is used when
`variable-pitch-mode' is turned on, generally whenever a non-monospace face is
preferred.

#+begin_src emacs-lisp
  (use-package font-lock
    ;; :ensure t
    :config
    (set-face-attribute 'default nil
                        :family "Iosevka Cosmic" :height 140 :weight 'light)
    (set-face-attribute 'variable-pitch nil
                        :family "Iosevka Aile" :height 140 :weight 'light)
    (set-face-attribute 'fixed-pitch nil
                        :inherit 'default))
#+end_src

** Theme settings

Themes are color customization packages which coordinate the various colors, and in some
cases, font-sizes for various aspects of text editing within Emacs, toolbars, tabbars
and modeline. Several themes are built-in to Emacs, by default, Crafted Emacs uses the
`deeper-blue' theme. Here is an example of loading a different theme from the venerable
Doom Emacs project.

#+begin_src emacs-lisp
  ;; (crafted-package-install-package 'doom-themes)
  (setq modus-themes-syntax '(green-strings yellow-comments)
        modus-themes-fringes 'subtle
        modus-themes-italic-constructs nil
        modus-themes-bold-constructs t
        modus-themes-org-blocks 'gray-background
        modus-themes-hl-line '(intense)
        modus-themes-paren-match '(intense)
        modus-themes-mode-line '(borderless))

  (setq modus-themes-operandi-color-overrides
          '((bg-main . "#f7f7f7")
            (bg-dim . "#f2f2f2")
            (bg-alt . "#e8e8e8")
            (bg-hl-line . "#eaeaef")
            (bg-active . "#e0e0e0")
            (bg-inactive . "#e6e6e6")
            (bg-region . "#b5b5b5")
            (bg-header . "#e4e4e4")
            (bg-tab-active . "#f5f5f5")
            (bg-tab-inactive . "#c0c0c0")))

  (progn
    (disable-theme 'deeper-blue)          ; first turn off the deeper-blue theme
    (load-theme 'modus-operandi t))       ; load the modus-operandi theme
#+end_src

** Cursor blink

I don't like the cursor to blink.

#+begin_src emacs-lisp
  (blink-cursor-mode 0)
#+end_src

** Other settings

Prettify the frames a little (still not 100% sure on this one though).

#+begin_src emacs-lisp
  (modify-all-frames-parameters
   '((right-divider-width . 20)
     (internal-border-width . 20)))
  (dolist (face '(window-divider
                  window-divider-first-pixel
                  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background)))
  (set-face-background 'fringe (face-attribute 'default :background))
#+end_src

I don't like to maximize my editor from the get-go, but the default frame (80×24) is too
small.

#+begin_src emacs-lisp
  ;; frame size at startup
  (set-frame-width (selected-frame) 100)
  (set-frame-height (selected-frame) 50)
#+end_src

I have grown accustomed to 88 column width due to =black= Python formatting. I'd like for
the rest of my text to be like that too.

#+begin_src emacs-lisp
  ;; fill column
  (setq-default fill-column 88)
#+end_src

* Org-mode settings

I want to make more use of =org-mode=, especially =org-agenda=.

** org-modern [90%]

Prettify =org-mode= using the excellent =org-modern= package. I will add the hooks
recommended by the author, using the syntax offered by =use-package=.

#+begin_src emacs-lisp
  (use-package org-modern
    :quelpa (org-modern :fetcher github :repo "minad/org-modern")
    :hook ((org-mode . org-modern-mode)
           (org-agenda-finalize . org-modern-agenda)))
#+end_src

In order for org-modern to look absolutely awesome, you need to change some variables.

#+begin_src emacs-lisp
  (setq
  ;; Edit settings
  org-auto-align-tags nil
  org-tags-column 0
  org-catch-invisible-edits 'show-and-error
  org-special-ctrl-a/e t
  org-insert-heading-respect-content t

  ;; Org styling, hide markup etc.
  org-hide-emphasis-markers t
  org-pretty-entities t
  org-ellipsis "…"

  ;; Agenda styling
  org-agenda-tags-column 0
  org-agenda-block-separator ?─
  org-agenda-time-grid
  '((daily today require-timed)
    (800 1000 1200 1400 1600 1800 2000)
    " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
  org-agenda-current-time-string
  "⭠ now ─────────────────────────────────────────────────")
#+end_src

* I'd like to use yasnippet thank you very much

#+begin_src emacs-lisp
  (use-package yasnippet
      :quelpa (yasnippet :fetcher github :repo "joaotavora/yasnippet")
      :config
      (crafted-package-install-package 'yasnippet-snippets)
      (yas-global-mode 1))
#+end_src

* =whick-key= and keybindings

** which-key.el

Maybe this should go into the ui?

#+begin_src emacs-lisp
  (crafted-package-install-package 'which-key)
  (which-key-mode)
#+end_src

** TODO keybindings

Add general.el keybindings as a module and =require= it here.

* Neotree

#+begin_src emacs-lisp
  (crafted-package-install-package 'neotree)
  ;; (evil-define-key 'normal 'global (kbd "<leader>fT") 'neotree-toggle)
#+end_src

* Emacs EAT

Emulate A Terminal. Proper terminal emulation in Emacs.

#+begin_src emacs-lisp
  (quelpa '(eat :fetcher git
                :url "https://codeberg.org/akib/emacs-eat"
                :files ("*.el" ("term" "term/*.el") "*.texi"
                        "*.ti" ("terminfo/e" "terminfo/e/*")
                        ("terminfo/65" "terminfo/65/*")
                        ("integration" "integration/*")
                        (:exclude ".dir-locals.el" "*-tests.el"))))
#+end_src

* Python

#+begin_src emacs-lisp
  (add-hook 'conda-postactivate-hook (lambda () (eglot-reconnect)))
  (setenv "WORKON_HOME" "~/mambaforge/envs/")
  (use-package ein
    :commands ein:run
    :ensure t)
    ;;  (crafted-package-install-package 'jedi)
    ;;  (add-hook 'python-mode-hook #'jedi-mode)
#+end_src

* Quarto

Quarto is a scientific/technical publishing system built on top of pandoc.
They are so nice to provide an emacs mode (based off polymode) for their format (which
is essentially pandoc markdown with some extras).

#+begin_src emacs-lisp
  (use-package quarto-mode
    :ensure-system-package
    quarto
    :ensure t
    ;; :requires (polymode poly-markdown markdown-mode request)
    :config
    (use-package polymode :ensure t)
    (use-package poly-markdown :ensure t)
    (use-package markdown-mode :ensure t)
    (use-package request :ensure t)
    :mode (("\\.Rmd" . poly-quarto-mode)))
#+end_src

* Markdown

Possibly should move to a small module. Maybe try to use marksman idk.

#+begin_src emacs-lisp
  (crafted-package-install-package 'markdown-mode)
#+end_src

* Magit

Magit is one of these packages in Emacs that you can't find anywhere else.

#+begin_src emacs-lisp
  (crafted-package-install-package 'magit)
#+end_src

I'm starting to think: should I move things like this to a module, and define
keybindings and other customizations there? Probably.

* Custom.el

By default, Crafted Emacs keeps your config file clean. All the customization
settings that Emacs normally automatically adds to your config.el go into
the file =custom.el= instead. If you don't want this, set the respective
variable to =nil=:

#+begin_src emacs-lisp
  ;; To not load `custom.el' after `config.el', uncomment this line.
  ;; (setq crafted-load-custom-file nil)
#+end_src

* Tangling to early-config.el

If you need to make settings to =early-config.el=, you can do that from here, too.
Just begin the source code block with:

#+begin_src org
  #+begin_src emacs-lisp :tangle ./early-config.el
#+end_src
